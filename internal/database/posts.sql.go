// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: posts.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (description, featured_photo_id, user_id, family_id, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, created_at, updated_at, description, featured_photo_id, user_id, family_id
`

type CreatePostParams struct {
	Description     string
	FeaturedPhotoID pgtype.Text
	UserID          string
	FamilyID        int64
	CreatedAt       pgtype.Timestamp
	UpdatedAt       pgtype.Timestamp
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, createPost,
		arg.Description,
		arg.FeaturedPhotoID,
		arg.UserID,
		arg.FamilyID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.FeaturedPhotoID,
		&i.UserID,
		&i.FamilyID,
	)
	return i, err
}

const getPost = `-- name: GetPost :one
SELECT id, created_at, updated_at, description, featured_photo_id, user_id, family_id FROM posts
WHERE id=$1
LIMIT 1
`

func (q *Queries) GetPost(ctx context.Context, id int64) (Post, error) {
	row := q.db.QueryRow(ctx, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.FeaturedPhotoID,
		&i.UserID,
		&i.FamilyID,
	)
	return i, err
}
