// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: families.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFamily = `-- name: CreateFamily :one
INSERT INTO families (id, created_at, updated_at, name, description)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, created_at, updated_at, name, description
`

type CreateFamilyParams struct {
	ID          int64
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
	Name        string
	Description string
}

func (q *Queries) CreateFamily(ctx context.Context, arg CreateFamilyParams) (Family, error) {
	row := q.db.QueryRow(ctx, createFamily,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Description,
	)
	var i Family
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
	)
	return i, err
}

const getFamilyById = `-- name: GetFamilyById :one
SELECT id, created_at, updated_at, name, description FROM families
WHERE id = $1
`

func (q *Queries) GetFamilyById(ctx context.Context, id int64) (Family, error) {
	row := q.db.QueryRow(ctx, getFamilyById, id)
	var i Family
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
	)
	return i, err
}

const getUserFamily = `-- name: GetUserFamily :one
SELECT id, created_at, updated_at, name, description FROM families AS f
WHERE id = (
    SELECT family_id
		FROM users as u
        WHERE u.id=$1
)
`

func (q *Queries) GetUserFamily(ctx context.Context, id string) (Family, error) {
	row := q.db.QueryRow(ctx, getUserFamily, id)
	var i Family
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
	)
	return i, err
}
